{"version":3,"sources":["serviceWorker.js","App.js","index.js"],"names":["Boolean","window","location","hostname","match","initialState","fermVol","dillution","cellConc","densSlurry","numSquares","yeastReducer","state","action","type","payload","gravity","liveCells","deadCells","Error","InfoCell","props","Col","Row","className","title","Form","Control","size","readOnly","placeholder","value","n","YeastCalculator","useReducer","dispatch","useState","output","setOutput","useEffect","cellsCounted","viability","toFixed","squares","fermVolML","cellsPerML","Math","pow","cellConcPerMLPerP","totalCellsPitch","volNeededML","volNeededLiter","volNeededGal","massNeededGram","massNeededKG","massNeededLB","cellsML","toExponential","fermGal","fermML","cellConcML","Container","style","marginTop","id","onChange","e","Number","target","md","display","Nav","Link","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6ee0c30b.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useEffect, useReducer, useState} from \"react\";\nimport {Container} from \"react-bootstrap\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Form from \"react-bootstrap/Form\";\nimport Nav from \"react-bootstrap/Nav\"\n\nconst initialState = {\n  fermVol: 10,\n  dillution: 200,\n  cellConc: 1.0,\n  densSlurry: 1.1,\n  numSquares: 25\n}\n\nconst yeastReducer = (state, action) => {\n  switch (action.type) {\n    case 'FERMVOL':\n      return {...state, fermVol: action.payload};\n    case 'GRAVITY':\n      return {...state, gravity: action.payload};\n    case 'CELLCONC':\n      return {...state, cellConc: action.payload};\n    case 'DENSSLURRY':\n      return {...state, densSlurry: action.payload};\n    case 'NUMSQUARES':\n      return {...state, numSquares: action.payload};\n    case 'DILLUTION':\n      return {...state, dillution: action.payload};\n    case 'LIVECELLS':\n      return {...state, liveCells: action.payload}\n    case 'DEADCELLS':\n      return {...state, deadCells: action.payload}\n    default:\n      throw new Error('WTF OVER')\n  }\n}\n\nconst YeastCalculator = () => {\n  const [state, dispatch] = useReducer(yeastReducer, initialState);\n  const [output, setOutput] = useState({});\n  function calc() {\n    let cellsCounted = (state.liveCells + state.deadCells)\n    let viability = (state.liveCells / cellsCounted * 100).toFixed(2)\n    let squares = 25 / state.numSquares\n    let fermVolML = (state.fermVol * 31) * 3785.41;\n    let cellsPerML = cellsCounted * squares * state.dillution * Math.pow(10,4)\n    let cellConcPerMLPerP = (state.cellConc * Math.pow(10,6))\n    let totalCellsPitch = state.fermVol * 117180 * state.gravity * Math.pow(10, 5)\n    let volNeededML = totalCellsPitch / cellsPerML\n    let volNeededLiter = volNeededML / 1000\n    let volNeededGal = volNeededLiter * 0.264172\n    let massNeededGram = volNeededML / state.densSlurry\n    let massNeededKG = massNeededGram / 1000\n    let massNeededLB = massNeededKG * 2.20462\n    setOutput({...output,\n      viability: viability,\n      cellsCounted: cellsCounted,\n      cellsML: cellsPerML.toExponential(2),\n      fermGal: state.fermVol * 31,\n      fermML: fermVolML.toExponential(2),\n      cellConcPerMLPerP: cellConcPerMLPerP.toExponential(2),\n      cellConcML: (cellConcPerMLPerP * state.gravity).toExponential(2),\n      totalCellsPitch: totalCellsPitch.toExponential(2),\n      volNeededML: volNeededML.toExponential((2)),\n      volNeededLiter: volNeededLiter.toFixed(2),\n      volNeededGal: volNeededGal.toFixed(2),\n      massNeededGram: massNeededGram.toExponential(2),\n      massNeededKG: massNeededKG.toFixed(2),\n      massNeededLB: massNeededLB.toFixed(2)\n    })\n  }\n  useEffect(calc,[state]);\n  return (\n      <Container style={{marginTop: \"30px\"}} id=\"yeast-calc\">\n        <h3>Yeast Slurry Pitch Calculator</h3>\n        <p>Use the table below while performing yeast cell counts of your slurry before pitch.\n        </p>\n        <Row>\n          <Col className=\"input\">Yellow Cells are inputs</Col>\n          <Col className=\"output\">Blue Cells are calculated</Col>\n        </Row>\n        <Row>\n          <Col className=\"leftAnchor-col\">\n            <Row className=\"topRow\">Fermentation Volume (in BBL)</Row>\n            <Row className=\"input btmCol\">\n              <Form.Control placeholder={state.fermVol}\n                            onChange={e => dispatch({\n                              type: 'FERMVOL',\n                              payload: Number(e.target.value)\n                            })} size=\"sm\" type=\"text\"/></Row>\n          </Col>\n          <Col>This is size of equipment</Col>\n          <InfoCell title=\"Cell Count (Cells/ML)\" value={output.cellsML}/>\n          <InfoCell title=\"Fermentation Volume (gal)\" value={output.fermGal}/>\n          <InfoCell title=\"Fermentation Volume (mL)\" value={output.fermML}/>\n          <InfoCell title=\"Desired Cell Concentration (Cells/mL-P)\" value={output.cellConcPerMLPerP}/>\n          <InfoCell title=\"Desired Cell Concentration (Cells/mL)\" value={output.cellConcML}/>\n          <InfoCell title=\"Total # Cells for Pitch\" value={output.totalCellsPitch}/>\n        </Row>\n        <Row>\n          <Col className=\"leftAnchor-col\">\n            <Row className=\"topRow\">Desired Gravity</Row>\n            <Row className=\"input\">\n              <Form.Control onChange={e => dispatch({\n                type: 'GRAVITY',\n                payload: Number(e.target.value)\n              })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>This is the expected gravity of the beer being pitched into</Col>\n          <InfoCell title=\"Volume of Slurry Needed (mL)\" value={output.volNeededML}/>\n          <InfoCell title=\"Volume of Slurry needed (L)\" value={output.volNeededLiter}/>\n          <InfoCell title=\"Volume of Slurry Needed (Gal)\" value={output.volNeededGal}/>\n          <InfoCell title=\"Mass of slurry Needed(g)\" value={output.massNeededGram}/>\n          <InfoCell title=\"Mass of slurry needed (KG)\" value={output.massNeededKG}/>\n          <InfoCell title=\"Mass of slurry needed (lb)\" value={output.massNeededLB}/>\n        </Row>\n        <Row>\n          <Col className=\"leftAnchor-col\">\n            <Row className=\"topRow\">Desired Cell concentration (Cells/mL x 1E6)</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.cellConc}\n                            onChange={e => dispatch({\n                                  type: 'CELLCONC',\n                                  payload: Number(e.target.value)\n                                }\n                            )} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>This is the desired concentration of cells/mL</Col>\n          <Col className=\"leftAnchor-col\" md={9}>\n            <Row className=\"topRow\"></Row>\n            <Row style={{display: \"inline\"}}>Hemocytometer cell count</Row>\n          </Col>\n        </Row>\n        <Row>\n          <Col className=\"leftAnchor-col\">\n            <Row className=\"topRow\">Density of Slurry (g/mL)</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.densSlurry}\n                            onChange={e => dispatch({\n                              type: 'DENSSLURRY',\n                              payload: Number(e.target.value)\n                            })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>\n            <Row>This is the density of the slury being pitched. This can be measured of if unknown go with\n              1.1g/mL</Row>\n          </Col>\n          <InfoCell title=\"Total Cells Counted\" value={output.cellsCounted}/>\n          <Col>\n            <Row className=\"topRow\"># of Squares Counted</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.numSquares} onChange={e => dispatch({\n                type: 'NUMSQUARES',\n                payload: Number(e.target.value)\n              })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>\n            <Row className=\"topRow\">Dilution</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.dillution}\n                            onChange={e => dispatch({\n                              type: 'DILLUTION',\n                              payload: Number(e.target.value)\n                            })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>\n            <Row className=\"topRow\">Live Cells Counted</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.liveCells}\n                            onChange={e => dispatch({\n                              type: 'LIVECELLS',\n                              payload: Number(e.target.value)\n                            })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <Col>\n            <Row className=\"topRow\">Dead Cells Counted</Row>\n            <Row className=\"input\">\n              <Form.Control placeholder={state.deadCells}\n                            onChange={e => dispatch({\n                              type: 'DEADCELLS',\n                              payload: Number(e.target.value)\n                            })} size=\"sm\"\n                            type=\"text\"/></Row>\n          </Col>\n          <InfoCell title=\"% Viability (Do not pitch under 90%)\" value={output.viability}/>\n        </Row>\n        <span>Feel free to contribute</span>\n              <Nav.Link href=\"https://www.github.com/foestauf/yeast-calc\">Github</Nav.Link>\n      </Container>\n  )\n}\n\nconst InfoCell = (props) => {\n  function isNaN(n) {\n    if (n >= 0) {\n      return n\n    } else {\n      return '-'\n    }\n  }\n  return (\n      <Col>\n        <Row className=\"topRow\">{props.title}</Row>\n        <Row className=\"output\">\n          <Form.Control size=\"sm\" type=\"text\" readOnly placeholder=\"-\"\n                        value={isNaN(props.value)}/></Row>\n      </Col>\n  )\n}\n\nexport default YeastCalculator;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport YeastCalculator from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <YeastCalculator />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}