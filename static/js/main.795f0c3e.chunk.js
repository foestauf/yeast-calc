(this["webpackJsonpyeast-calc"]=this["webpackJsonpyeast-calc"]||[]).push([[0],{23:function(e,t,a){e.exports=a(32)},28:function(e,t,a){},32:function(e,t,a){"use strict";a.r(t);var l=a(0),n=a.n(l),r=a(15),o=a.n(r);a(28),Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var c=a(13),s=a(7),m=a(34),u=a(5),i=a(6),d=a(8),E=a(20),p={fermVol:10,dillution:200,cellConc:1,densSlurry:1.1,numSquares:25},y=function(e,t){switch(t.type){case"FERMVOL":return Object(s.a)(Object(s.a)({},e),{},{fermVol:t.payload});case"GRAVITY":return Object(s.a)(Object(s.a)({},e),{},{gravity:t.payload});case"CELLCONC":return Object(s.a)(Object(s.a)({},e),{},{cellConc:t.payload});case"DENSSLURRY":return Object(s.a)(Object(s.a)({},e),{},{densSlurry:t.payload});case"NUMSQUARES":return Object(s.a)(Object(s.a)({},e),{},{numSquares:t.payload});case"DILLUTION":return Object(s.a)(Object(s.a)({},e),{},{dillution:t.payload});case"LIVECELLS":return Object(s.a)(Object(s.a)({},e),{},{liveCells:t.payload});case"DEADCELLS":return Object(s.a)(Object(s.a)({},e),{},{deadCells:t.payload});default:throw new Error("WTF OVER")}},C=function(e){return n.a.createElement(i.a,null,n.a.createElement(u.a,{className:"topRow"},e.title),n.a.createElement(u.a,{className:"output"},n.a.createElement(d.a.Control,{size:"sm",type:"text",readOnly:!0,placeholder:"-",value:function(e){if(null!=e)return e>=0?e:"-"}(e.value)})))},h=function(){var e=Object(l.useReducer)(y,p),t=Object(c.a)(e,2),a=t[0],r=t[1],o=Object(l.useState)({}),h=Object(c.a)(o,2),f=h[0],N=h[1];return Object(l.useEffect)((function(){var e=a.liveCells+a.deadCells,t=(a.liveCells/e*100).toFixed(2),l=25/a.numSquares,n=31*a.fermVol*3785.41,r=e*l*a.dillution*Math.pow(10,4),o=a.cellConc*Math.pow(10,6),c=117180*a.fermVol*a.gravity*Math.pow(10,5),m=c/r,u=m/1e3,i=.264172*u,d=m/a.densSlurry,E=d/1e3,p=2.20462*E;N(Object(s.a)(Object(s.a)({},f),{},{viability:t,cellsCounted:e,cellsML:r.toExponential(2),fermGal:31*a.fermVol,fermML:n.toExponential(2),cellConcPerMLPerP:o.toExponential(2),cellConcML:(o*a.gravity).toExponential(2),totalCellsPitch:c.toExponential(2),volNeededML:m.toExponential(2),volNeededLiter:u.toFixed(2),volNeededGal:i.toFixed(2),massNeededGram:d.toExponential(2),massNeededKG:E.toFixed(2),massNeededLB:p.toFixed(2)}))}),[a]),n.a.createElement(m.a,{style:{marginTop:"30px"},id:"yeast-calc"},n.a.createElement("h3",null,"Yeast Slurry Pitch Calculator"),n.a.createElement("p",null,"Use the table below while performing yeast cell counts of your slurry before pitch."),n.a.createElement(u.a,null,n.a.createElement(i.a,{className:"input"},"Yellow Cells are inputs"),n.a.createElement(i.a,{className:"output"},"Blue Cells are calculated")),n.a.createElement(u.a,null,n.a.createElement(i.a,{className:"leftAnchor-col"},n.a.createElement(u.a,{className:"topRow"},"Fermentation Volume (in BBL)"),n.a.createElement(u.a,{className:"input btmCol"},n.a.createElement(d.a.Control,{placeholder:a.fermVol,onChange:function(e){return r({type:"FERMVOL",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,"This is size of equipment"),n.a.createElement(C,{title:"Cell Count (Cells/ML)",value:f.cellsML}),n.a.createElement(C,{title:"Fermentation Volume (gal)",value:f.fermGal}),n.a.createElement(C,{title:"Fermentation Volume (mL)",value:f.fermML}),n.a.createElement(C,{title:"Desired Cell Concentration (Cells/mL-P)",value:f.cellConcPerMLPerP}),n.a.createElement(C,{title:"Desired Cell Concentration (Cells/mL)",value:f.cellConcML}),n.a.createElement(C,{title:"Total # Cells for Pitch",value:f.totalCellsPitch})),n.a.createElement(u.a,null,n.a.createElement(i.a,{className:"leftAnchor-col"},n.a.createElement(u.a,{className:"topRow"},"Desired Gravity"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{onChange:function(e){return r({type:"GRAVITY",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,"This is the expected gravity of the beer being pitched into"),n.a.createElement(C,{title:"Volume of Slurry Needed (mL)",value:f.volNeededML}),n.a.createElement(C,{title:"Volume of Slurry needed (L)",value:f.volNeededLiter}),n.a.createElement(C,{title:"Volume of Slurry Needed (Gal)",value:f.volNeededGal}),n.a.createElement(C,{title:"Mass of slurry Needed(g)",value:f.massNeededGram}),n.a.createElement(C,{title:"Mass of slurry needed (KG)",value:f.massNeededKG}),n.a.createElement(C,{title:"Mass of slurry needed (lb)",value:f.massNeededLB})),n.a.createElement(u.a,null,n.a.createElement(i.a,{className:"leftAnchor-col"},n.a.createElement(u.a,{className:"topRow"},"Desired Cell concentration (Cells/mL x 1E6)"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.cellConc,onChange:function(e){return r({type:"CELLCONC",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,"This is the desired concentration of cells/mL"),n.a.createElement(i.a,{className:"leftAnchor-col",md:9},n.a.createElement(u.a,{className:"topRow"}),n.a.createElement(u.a,{style:{display:"inline"}},"Hemocytometer cell count"))),n.a.createElement(u.a,null,n.a.createElement(i.a,{className:"leftAnchor-col"},n.a.createElement(u.a,{className:"topRow"},"Density of Slurry (g/mL)"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.densSlurry,onChange:function(e){return r({type:"DENSSLURRY",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,n.a.createElement(u.a,null,"This is the density of the slury being pitched. This can be measured of if unknown go with 1.1g/mL")),n.a.createElement(C,{title:"Total Cells Counted",value:f.cellsCounted}),n.a.createElement(i.a,null,n.a.createElement(u.a,{className:"topRow"},"# of Squares Counted"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.numSquares,onChange:function(e){return r({type:"NUMSQUARES",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,n.a.createElement(u.a,{className:"topRow"},"Dilution"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.dillution,onChange:function(e){return r({type:"DILLUTION",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,n.a.createElement(u.a,{className:"topRow"},"Live Cells Counted"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.liveCells,onChange:function(e){return r({type:"LIVECELLS",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(i.a,null,n.a.createElement(u.a,{className:"topRow"},"Dead Cells Counted"),n.a.createElement(u.a,{className:"input"},n.a.createElement(d.a.Control,{placeholder:a.deadCells,onChange:function(e){return r({type:"DEADCELLS",payload:Number(e.target.value)})},size:"sm",type:"text"}))),n.a.createElement(C,{title:"% Viability (Do not pitch under 90%)",value:f.viability})),n.a.createElement("span",null,"Feel free to contribute"),n.a.createElement(E.a.Link,{href:"https://www.github.com/foestauf/yeast-calc"},"Github"))};o.a.render(n.a.createElement(n.a.StrictMode,null,n.a.createElement(h,null)),document.getElementById("root")),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(e){e.unregister()})).catch((function(e){console.error(e.message)}))}},[[23,1,2]]]);
//# sourceMappingURL=main.795f0c3e.chunk.js.map